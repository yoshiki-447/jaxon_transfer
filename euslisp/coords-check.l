(defun arm-solve-ik
    (&key(rarm-trans-pos #f(0 0 0))
	 (larm-trans-pos #f(0 0 0))
	 (rarm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (larm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rarm-end-coords (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-end-coords (send *robot* :larm :end-coords :copy-worldcoords))
	 (rarm-translation-coords (send rarm-end-coords :translate rarm-trans-pos :world) :copy-worldcoords)
	 (larm-translation-coords (send larm-end-coords :translate larm-trans-pos :world) :copy-worldcoords)
	 (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
				   :rpy rarm-rpy))
	 (larm-target (make-coords :pos (send larm-translation-coords :pos)
				   :rpy larm-rpy)))
    (send *robot* :inverse-kinematics (list rarm-target larm-target)
	  :move-target (list (send *robot* :rarm :end-coords)
			     (send *robot* :larm :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
			   (send *robot* :link-list (send *robot* :larm :end-coords :parent)))
	  :translation-axis (list t t)
	  :rotation-axis (list t t)
	  ;; :target-centroid-pos (midpoint 0.5
	  ;; 				 (send *robot* :rleg :end-coords :worldpos)
	  ;; 				 (send *robot* :rleg :end-coords :worldpos))
	  ;; :cog-translation-axis :z
	  )
    )
  )

(defvar *angle-list* '())
(defvar *time-list* '())
(defvar *wrench-list* '())
(defun y-coords (&key (run t))
  (send *robot* :reset-pose)
  (arm-solve-ik :rarm-trans-pos #f(300 0 200))
  (when run
    (send *ri* :angle-vector (send *robot* :angle-vector) 5000)
    (send *ri* :wait-interpolation)
    )
  (setq y-pos 0.0)
  (setq *angle-list* '())
  (setq *time-list* '())
  (setq *wrench-list* '())
  (send *ri* :set-interpolation-mode :linear)
  (dotimes (i 2500)
    (send *robot* :reset-pose)
    (arm-solve-ik :rarm-trans-pos #f(300 0 200))
    (arm-solve-ik :rarm-trans-pos (float-vector 0 y-pos 0.0))
    (setq position (send *robot* :angle-vector))
    (cond ((> (length *angle-list*) 0)
  	   (nconc *angle-list* (list position))
  	   )
  	  (t
  	   (push position *angle-list*)
  	   )
  	  )
    (push 2.0 *time-list*)
    (setq r_wr (float-vector 0.0 (* 50 (sin (/ (* pi i) 2500))) 0.0 0.0 0.0 0.0))
    (setq zero (float-vector 0.0 0.0 0.0 0.0 0.0 0.0))
    (setq wr (concatenate float-vector zero zero r_wr zero))
    (cond ((> (length *wrench-list*) 0)
	   (nconc *wrench-list* (list wr))
	   )
	  (t
	   (push wr *wrench-list*)
	   )
	  )
    (incf y-pos 0.1)
    )
  (when run
    (send *ri* :angle-vector (car *angle-list*))
    (send *ri* :wait-interpolation)
    (send *ri* :start-log)
    (send *ri* :wait-interpolation)
    (send *ri* :angle-vector-sequence-full *angle-list* *time-list* :wrench *wrench-list*)
    )
  )

(defun wrench-drawplot (&key (list *wrench-list*) (num 13))
  (setq a (gnuplot))
  (setq b '())
  (dotimes (i (length list))
    (push (elt (elt list i) num) b)
    )
  (nreverse b)
  (send a :draw b)
  )
