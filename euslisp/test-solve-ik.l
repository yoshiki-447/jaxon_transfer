(require "models/arrow-object.l")

(defun link5-solve-ik
    (&key(rarm-trans-pos #f(0 0 0))
	 (larm-trans-pos #f(0 0 0))
	 (rarm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (larm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rarm-link5-coords (send *robot* :rarm_link5_lk :copy-worldcoords))
	 (larm-link5-coords (send *robot* :larm_link5_lk :copy-worldcoords))
	 (rarm-translation-coords (send rarm-link5-coords ;;:rotate (/ pi 2.0) :y)
					:translate rarm-trans-pos :world) :copy-worldcoords)
	 (larm-translation-coords (send larm-link5-coords :translate larm-trans-pos :world) :copy-worldcoords)
	 (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
				   :rpy rarm-rpy))
	 (larm-target (make-coords :pos (send larm-translation-coords :pos)
				   :rpy larm-rpy))
	 (rarm-move-target (arrow))
	 ;; (larm-move-target (send (send larm_link6 :rotate (/ pi 2.0) :y) :copy-worldcorrds))
	 )
    (send rarm-move-target :newcoords (send rarm-link5-coords :rotate (/ pi 2.0) :y))
    (format t "coords: ~A~%" rarm-move-target)
    (send (send (send *robot* :rarm :end-coords) :parent) :assoc rarm-move-target)
    (objects (list *robot* rarm-target rarm-move-target))
    (send *robot* :inverse-kinematics (list rarm-target larm-target)
	  :move-target (list
			;; (send *robot* :rarm_link5_lk)
			rarm-move-target
			;; (send *robot* :rarm :end-coords)
			;; (send (send *robot* :larm_link5_lk) :copy-worldcoords)
			(send *robot* :larm :end-coords)
			)
	  :link-list (list
		      (send *robot* :link-list (send *robot* :rarm_link5_lk :parent))
	  	      (send *robot* :link-list (send *robot* :larm_link5_lk :parent))
	  	      ;;(send *robot* :link-list (send *robot* :rarm :end-coords :parent))
		      ;;   (send *robot* :link-list (send *robot* :larm :end-coords :parent))
		      )
	  :translation-axis (list t t)
	  :rotation-axis (list t t)
	  ;; :target-centroid-pos (midpoint 0.5
	  ;; 				 (send *robot* :rleg :end-coords :worldpos)
	  ;; 				 (send *robot* :rleg :end-coords :worldpos))
	  ;; :cog-translation-axis :z
	  )
     )
  )
(defun arm-solve-ik-locate
    (&key(rarm-trans-pos (send *robot* :rarm :end-coords :worldpos))
	 (larm-trans-pos (send *robot* :larm :end-coords :worldpos))
	 (rarm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (larm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rarm-end-coords (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-end-coords (send *robot* :larm :end-coords :copy-worldcoords))
	 (rarm-translation-coords (send rarm-end-coords :locate rarm-trans-pos :world) :copy-worldcoords)
	 (larm-translation-coords (send larm-end-coords :locate larm-trans-pos :world) :copy-worldcoords)
	 (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
				   :rpy rarm-rpy))
	 (larm-target (make-coords :pos (send larm-translation-coords :pos)
				   :rpy larm-rpy)))
    (send *robot* :inverse-kinematics (list rarm-target larm-target)
	  :move-target (list (send *robot* :rarm :end-coords)
			     (send *robot* :larm :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
			   (send *robot* :link-list (send *robot* :larm :end-coords :parent)))
	  :translation-axis (list t t)
	  :rotation-axis (list t t)
	  ;; :target-centroid-pos (midpoint 0.5
	  ;; 				 (send *robot* :rleg :end-coords :worldpos)
	  ;; 				 (send *robot* :rleg :end-coords :worldpos))
	  ;; :cog-translation-axis :z
	  )
    )
  )

(defun full-solve-ik
    (&key(rarm-trans-pos #f(0 0 0))
	 (larm-trans-pos #f(0 0 0))
	 (rarm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (larm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rleg-coords (send *robot* :rleg :end-coords :copy-worldcoords))
	 (lleg-coords (send *robot* :lleg :end-coords :copy-worldcoords))
	 (rarm-end-coords (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-end-coords (send *robot* :larm :end-coords :copy-worldcoords))
	 (rarm-translation-coords (send rarm-end-coords :translate rarm-trans-pos :world) :copy-worldcoords)
	 (larm-translation-coords (send larm-end-coords :translate larm-trans-pos :world) :copy-worldcoords)
	 (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
				   :rpy rarm-rpy))
	 (larm-target (make-coords :pos (send larm-translation-coords :pos)
				   :rpy larm-rpy)))
    (objects (list *robot* (send *robot* :rarm :end-coords :copy-worldcoords) rarm-target))
    (read-line)
    (send *robot* :fullbody-inverse-kinematics
	  (list rleg-coords lleg-coords rarm-target larm-target)
	  :move-target (list (send *robot* :rleg :end-coords)
			     (send *robot* :lleg :end-coords)
			     (send *robot* :rarm :end-coords)
			     (send *robot* :larm :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rleg :end-coords :parent))
			   (send *robot* :link-list (send *robot* :lleg :end-coords :parent))
			   (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
			   (send *robot* :link-list (send *robot* :larm :end-coords :parent)))
	  :translation-axis (list t t t t)
	  :rotation-axis (list t t nil nil)
	  :target-centroid-pos (midpoint 0.5
	  				 (send *robot* :rleg :end-coords :worldpos)
	  				 (send *robot* :lleg :end-coords :worldpos))
	  :cog-translation-axis :z
	  )
    (objects (list *robot* (send *robot* :rarm :end-coords :copy-worldcoords) rarm-target))
    (read-line)
    
    (send *robot* :newcoords (make-coords))
    )
  )

(defun full-solve-ik-locate
    (&key(rarm-trans-pos (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-trans-pos (send *robot* :larm :end-coords :copy-worldcoords))
	 (centroid 0.5))
  (let* ((rleg-coords (send *robot* :rleg :end-coords :copy-worldcoords))
	 (lleg-coords (send *robot* :lleg :end-coords :copy-worldcoords))
	 (rarm-end-coords (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-end-coords (send *robot* :larm :end-coords :copy-worldcoords))
	 (rarm-target (send rarm-end-coords :locate (send rarm-trans-pos :pos) :world) :copy-worldcoords)
	 (larm-target (send larm-end-coords :locate (send larm-trans-pos :pos) :world) :copy-worldcoords)
	 ;; (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
	 ;; 			   :rpy rarm-rpy))
	 ;; (larm-target (make-coords :pos (send larm-translation-coords :pos)
	 ;; 			   :rpy larm-rpy)))
    (send *robot* :fullbody-inverse-kinematics
	  (list rleg-coords lleg-coords rarm-target larm-target)
	  :move-target (list (send *robot* :rleg :end-coords)
			     (send *robot* :lleg :end-coords)
			     (send *robot* :rarm :end-coords)
			     (send *robot* :larm :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rleg :end-coords :parent))
			   (send *robot* :link-list (send *robot* :lleg :end-coords :parent))
			   (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
			   (send *robot* :link-list (send *robot* :larm :end-coords :parent)))
	  :translation-axis (list t t t t) ;; ignore larm
	  ;; :rotation-axis (list t t nil nil)
	  :rotation-axis (list t t t nil)
	  :target-centroid-pos (midpoint centroid
	  				 (send *robot* :rleg :end-coords :worldpos)
	  				 (send *robot* :lleg :end-coords :worldpos))
	  :cog-translation-axis :z
	  )
    (objects (list *robot* rarm-target))
    ;; (send *robot* :newcoords (make-coords))
    )
  )
