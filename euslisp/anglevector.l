(ros::roseus "anglevector")
(ros::roseus-add-msgs "sensor_msgs")

;;(setq vec1 (send *ri* :potentio-vector))
;;(setq joint1 (list vec1))
;;(send *robot* :angle-vector (send *ri* :potentio-vector))
;;(setq tm1 (list 0.0))
;;(print joint1)

(defclass Subscriber
  :super propertied-object
  :slots (joint1 time-list)
  )

(defmethod Subscriber
  (:init () (setq joint1 nil
		  time-list nil)
	 self)
  (:ros-init ()
	     (ros::subscribe "/joint_states" ;; subscribeするtopicの名前を指定
			     sensor_msgs::JointState ;; msgの型
			     #'send self :cb-function ;; call-backメソッドを指定
			     )
	     )
  (:cb-function (msg)
		;;(format t "success~%")
		;; (when (and (> (length tm1) 1) (> (length joint1) 0))
		;;   (send *robot* :angle-vector (car joint1))
		;;   (send *ri* :angle-vector-sequence-full joint1 tm1)
		;;   (send *ri* :angle-vector (send *robot* :angle-vector) (- (car tm1) (elt tm1 1)))
		;;   (send *ri* :wait-interpolation)
		;;   )
		;; (let* ((stamp (send msg :header :stamp))
		;;        (time-in-sec (+ (send stamp :sec) (* 1e-9 (send stamp :nsec)))))
		;;   (setq diff (- time-in-sec (car tm1)))
		;;   (push diff tm1))
		;; (let ((positions (send msg :position)))
		;;   (when (arrayp positions)
		;;     (setq positions (scale (/ 180 pi) positions))
		;;     (push positions joint1)))
		;;(print joint1)
		;;(print tm1)
		;; (setq stamp (send msg :header :stamp))
		;; (setq time-in-sec (+ (send stamp :sec) (* 1e-9 (send stamp :nsec))))
                ;; (setq diff (- time-in-sec (car tm1)))
		;; (push diff tm1)
		(setq positions (send msg :position))
		(when (arrayp positions)
		  (setq positions (scale (/ 180 pi) positions))
		  (cond ((> (length joint1) 0)
			  
			 (nconc joint1 (list positions))
			   )
			(t
			 (push positions joint1)
			 )
			)
		  ;;(push 100 time-list)
		  (push 10 time-list)
		  )
		)
  (:ros-motion ()
	       (while (ros::ok)
		 (ros::spin-once)
		 (ros::sleep)
		 )
	       )
  )

(setq *rb* (instance Subscriber :init))
(send *rb* :ros-init)

;;(send *rb* :ros-motion)
     ;;(nreverse joint1)
     ;;(setq time-list (make-list (length joint1) :initial-element 3000))	 
;;send *ri* :angle-vector (send *robot* :angle-vector (car joint1))
;;(send *ri* :angle-vector-sequence-full joint1 time-list)
