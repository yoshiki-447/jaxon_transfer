import rospy
from jsk_recognition_msgs.msg import HumanSkeleton
import pyrealsense2 as rs
import numpy as np
import cv2

pipe = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30) #距離

profile = pipe.start(config)

def cb(msg):
    human = msg.skeletons[0]
    
    rospy.loginfo(human)

def calculate_kmin_kmax(depth_frame, joint_coords):
    depths = [depth_frame.get_distance(x, y) for (x, y) in joint_coords]
    kmin = min(depths)
    kmax = max(depths)

    return kmin, kmax

def adjust_depth_value(pin, kmin, kmax):
    if pin < kmin:
        pout = pin
    elif kmin <= pin < kmax:
        pout = (1/3) * pin + (2/3) * kmin
    else:  # pin >= kmax
        pout = pin - (1/3) * kmax + (2/3) * kmin

    return pout
    
try:
    # for i in range(0,100):
    #     frames = pipe.wait_for_frames()
    #     for f in frames:
    #         print(f.profile)
    rospy.init_node("roi")
    rospy.Subscriber("/skeleton_with_depth/output/skeletons", HumanSkeleton, cb)
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        frames = pipe.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        depth_image = np.asanyarray(depth_frame.get_data())
        depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.02), cv2.COLORMAP_JET)
        # 表示
        cv2.namedWindow('RealSense', cv2.WINDOW_AUTOSIZE)
        cv2.imshow('RealSense', depth_colormap)
        
        # q キー入力で終了
        if cv2.waitKey(1) & 0xFF == ord('q'):
            cv2.destroyAllWindows()
            break

        # # frameデータを取得
        # frames = pipe.wait_for_frames()
        # depth_frame = frames.get_depth_frame()
        # if not depth_frame:
        #     continue
        
        # depth_image = np.asanyarray(depth_color_frame.get_data())

        # shoulder_pos =
        # elbow_pos =
        # hip_pos =
        # joint_coords = [shoulder_pos, elbow_pos, hip_pos]

        # kmin, kmax = calculate_kmin_kmax(depth_frame, joint_coords)
        # print(f"kmin: {kmin}, kmax: {kmax}")
            
        rate.sleep()

finally:
    pipe.stop()
