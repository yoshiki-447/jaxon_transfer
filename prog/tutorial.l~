;; (setq *rarm-end-coords* (send *robot* :rarm :end-coords :copy-worldcoords))
;; (setq *rarm-target-coords* (send *rarm-end-coords* :translate #f(100 100 0) :world))
;; (send *robot* :inverse-kinematics *rarm-target-coords*
;;       :move-target (send *robot* :rarm :end-coords) ;; 動かす対称
;;       :link-list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
;;       :translation-axis t
;;       :rotation-axis t
;;       )

(defun arm-solve-ik
    (&key(rarm-trans-pos #f(0 0 0))
	 (larm-trans-pos #f(0 0 0))
	 (rarm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (larm-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rarm-end-coords (send *robot* :rarm :end-coords :copy-worldcoords))
	 (larm-end-coords (send *robot* :larm :end-coords :copy-worldcoords))
	 (rarm-translation-coords (send rarm-end-coords :translate rarm-trans-pos :world) :copy-worldcoords)
	 (larm-translation-coords (send larm-end-coords :translate larm-trans-pos :world) :copy-worldcoords)
	 (rarm-target (make-coords :pos (send rarm-translation-coords :pos)
				   :rpy rarm-rpy))
	 (larm-target (make-coords :pos (send larm-translation-coords :pos)
				   :rpy larm-rpy)))
    (send *robot* :inverse-kinematics (list rarm-target larm-target)
	  :move-target (list (send *robot* :rarm :end-coords)
			     (send *robot* :larm :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
			   (send *robot* :link-list (send *robot* :larm :end-coords :parent)))
	  :translation-axis (list t t)
	  :rotation-axis (list t t)
	  )
    )
  )

(defun foot-solve-ik
    (&key(rleg-trans-pos #f(0 0 0))
	 (lleg-trans-pos #f(0 0 0))
	 (rleg-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0)))
	 (lleg-rpy (float-vector (deg2rad 0) (deg2rad 0) (deg2rad 0))))
  (let* ((rleg-end-coords (send *robot* :rleg :end-coords :copy-worldcoords))
	 (lleg-end-coords (send *robot* :lleg :end-coords :copy-worldcoords))
	 (rleg-translation-coords (send rleg-end-coords :translate rleg-trans-pos :world) :copy-worldcoords)
	 (lleg-translation-coords (send lleg-end-coords :translate lleg-trans-pos :world) :copy-worldcoords)
	 (rleg-target (make-coords :pos (send rleg-translation-coords :pos)
				   :rpy rleg-rpy))
	 (lleg-target (make-coords :pos (send lleg-translation-coords :pos)
				   :rpy lleg-rpy)))
    (send *robot* :inverse-kinematics (list rleg-target lleg-target)
	  :move-target (list (send *robot* :rleg :end-coords)
			     (send *robot* :lleg :end-coords))
	  :link-list (list (send *robot* :link-list (send *robot* :rleg :end-coords :parent))
			   (send *robot* :link-list (send *robot* :lleg :end-coords :parent)))
	  :translation-axis (list t t)
	  :rotation-axis (list t t)
	  )
    )
  )


(arm-solve-ik :larm-trans-pos #f(400 -50 -50) :larm-rpy (float-vector (deg2rad -20) 0 0) :rarm-trans-pos #f(400 50 -50) :rarm-rpy (float-vector (deg2rad 20) 0 0))
(send *ri* :angle-vector (send *robot* :angle-vector))
(send *ri* :wait-interpolation)

;foot-solve-ik :rleg-trans-pos #f(0 0 0) :lleg-trans-pos #f(-50 50 0) :rleg-rpy (float-vector (deg2rad 30) 0 0) :lleg-rpy (float-vector (deg2rad 30) 0 0)
;send *robot* :torso :waist-y :joint-angle 30

(dotimes (i 6)
  (send *ri* :set-foot-steps
	(list (make-coords :coords (send *robot* :rleg :end-coords :copy-worldcoords) :name :rleg)
	      (make-coords :coords (send (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector -50 50 0)) :rotate (deg2rad 15) :z) :name :lleg)
	      (make-coords :coords (send (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector -50 50 0)) :rotate (deg2rad 15) :z) :name :rleg)
	      )
	)
  )

;; (send *ri* :set-foot-steps-with-param
;;       :foot-step-list
;;       (list (make-coords :coords (send *robot* :rleg :end-coords :copy-worldcoords) :name :rleg)
;; 	    (make-coords :coords (send (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector -100 100 0)) :rotate (deg2rad 30) :z) :name :lleg)
;; 	    (make-coords :coords (send (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector -100 100 0)) :rotate (deg2rad 30) :z) :name :rleg)
;; 	    )
;;       :step-time-list (list 2000 2000 2000)
;;       )

;; (send *ri* :set-foot-steps-with-base-height
;;       :fs
;;       (list (make-coords :coords (send *robot* :rleg :end-coords :copy-worldcoords) :name :rleg)
;; 	    (make-coords :coords (send (send (send *robot* :lleg :end-coords :copy-worldcoords) :translate (float-vector -100 100 0)) :rotate (deg2rad 30) :z) :name :lleg)
;; 	    (make-coords :coords (send (send (send *robot* :rleg :end-coords :copy-worldcoords) :translate (float-vector -100 100 0)) :rotate (deg2rad 30) :z) :name :rleg)
;; 	    )
;;       :av-list (list (send *robot* :angle-vector) (send *robot* :angle-vector) (send *robot* :angle-vector))
;;       :time-list (list 2000 2000 2000)
;;        )
